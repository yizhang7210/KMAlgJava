a
a <- c(3,1,2,3,-1)
prod(a)
a <- c(0,1,0,3,2,1,0)
a[a!=0]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a <- c(-1,1,-1,1,-1)
b <- c(1,1,0,0,1)
char(a,b)
b <- c(1,1,0,0,0)
char(a,b)
source('~/00ME/Education/UW/Projects/Biased-Function/Util.R')
source('~/.active-rstudio-document')
testFun
s <- c(0,0,0)
getFourier(testFun,s)
prod(s)
x <- c(1,1,1)
x*s
x[x!=0]
s[s!=0]
prod(s[s!=0])
source('~/.active-rstudio-document')
s
testFun
getFourier(testFun,s)
is.matrix(testFun)
?cbind
source('~/.active-rstudio-document')
testFun
generateFun(3)
source('~/.active-rstudio-document')
funToFourier(testFun)
source('~/.active-rstudio-document')
funToFourier(testFun)
testFun
testFun[,4]  == -1
testFun[testFun[,4]  == -1,]
n <- 3
testFun[testFun[,n+1]  == -1,]
source('~/.active-rstudio-document')
testFourier
testReducedChar
source('~/.active-rstudio-document')
testFourier
testFun
testReducedChar
source('~/.active-rstudio-document')
testReducedChar
testFun
testFourier
source('~/.active-rstudio-document')
testFourier
testReducedChar
testFourier
testFun
testFourier[,vals]
testFourier[,5]
testFourier[,5]^2*testReducedChar[,5]
sum(testFourier[,5]^2*testReducedChar[,5])
testFourier[,5]
testFourier[,5]^2
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
testFourier
source('~/.active-rstudio-document')
testFourier
testReducedChar
source('~/.active-rstudio-document')
testReducedChar
0.83333333*16
0.83333333333333333333333333333333*16
0.83333333333333333333333333333333*32
0.83333333333333333333333333333333*3
testFourier
source('~/00ME/Education/UW/Projects/Biased-Function/Util.R')
testFourier
source('~/.active-rstudio-document')
testFourier
source('~/.active-rstudio-document')
source('~/00ME/Education/UW/Projects/Biased-Function/Util.R')
View(testFourier)
View(testFun)
?ifelse
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(100, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(80, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
fCoefs
fCoefs[fCoefs>0]
source('~/.active-rstudio-document')
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
estiVals <- predictByFourier(testSet, fCoefs);
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
estiVals <- predictByFourier(testSet, trimmedCoefs);
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
trimmedCoefs <- ifelse(fCoefs > 0.12, fCoefs, 0);
estiVals <- predictByFourier(testSet, trimmedCoefs);
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
plot(fCoefs)
plot(trimmedCoefs)
fCoefs <- getFourierCoefs(trainSet, trainVals);
trimmedCoefs <- ifelse(abs(fCoefs) > 0.12, fCoefs, 0);
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predictByFourier(testSet, trimmedCoefs);
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
trimmedCoefs <- ifelse(abs(fCoefs) > 0.05, fCoefs, 0);
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predictByFourier(testSet, trimmedCoefs);
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
summary(fCoefs)
fCoefs[fCoefs != 0]
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
estiVals <- predictByFourier(testSet, trimmedCoefs);
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
plot(estiVals)
estiVals <- predictByFourier(testSet, fCoefs);
plot(estiVals)
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
estiVals <- predictByFourier(testSet, trimmedCoefs);
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
estiVals <- predictByFourier(testSet, trimmedCoefs);
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
estiVals <- predictByFourier(testSet, fCoefs);
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
trimmedCoefs <- ifelse(abs(fCoefs) > 0.08, fCoefs, 0);
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predictByFourier(testSet, trimmedCoefs);
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
trimmedCoefs <- ifelse(abs(fCoefs) > 0.2, fCoefs, 0);
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predictByFourier(testSet, trimmedCoefs);
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
trimmedCoefs <- ifelse(abs(fCoefs) > 0.5, fCoefs, 0);
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predictByFourier(testSet, trimmedCoefs);
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
View(trimmedCoefs)
sum(trimmedCoefs)
trimmedCoefs[trimmedCoefs != 0]
trimmedCoefs <- ifelse(abs(fCoefs) > 0.25, fCoefs, 0);
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predictByFourier(testSet, trimmedCoefs);
trimmedCoefs[trimmedCoefs != 0]
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
source('~/.active-rstudio-document')
fCoefs <- getFourierCoefs(trainSet, trainVals);
trimmedCoefs <- ifelse(abs(fCoefs) > 0, fCoefs, 0);
estiVals <- predictByFourier(testSet, fCoefs);
estiVals <- predictByFourier(testSet, trimmedCoefs);
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
plot(fCoefs)
