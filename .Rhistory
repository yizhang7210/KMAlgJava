chars <- charMat[nRow,,drop=F];
return(chars%*%fCoefs);
}
return(h);
}
h <- getEstiFun(completeCoefs)
h(x)
trainSet
x <- c(1,1,1,0,1,1,1,0)
h(x)
trainVals
makePrediction(testSet, fCoefs){
h <- getEstiFun(fCoefs);
vals <- apply(testSet, 1, h);
return(vals);
}
h
makePrediction <- function(testSet, fCoefs){
h <- function(vec){
nRow <- vecToInt(vec);
chars <- charMat[nRow,,drop=F];
return(chars%*%fCoefs);
}
vals <- apply(testSet, 1, h);
return(vals);
}
trainSet
makePrediction(trainSet,completeCoefs)
trainVals
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(150, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/rawFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
fCoefs <- getFourierCoefs(trainSet, trainVals);
estiVals <- predictByFourier(testSet, fCoefs);
debugSource('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
squareMat
dim(squareMat$squareMat)
inRows
sort(inRows)
duplicated(inRows)
sum(as.numreic(duplicated(inRows)))
sum(as.numeric(duplicated(inRows)))
charMat
dim(charMat)
dim(inRows)
length(inRows)
charMat[inRows,]
dim(charMat[inRows,])
View(charMatRed)
inRows
a <- c(1,5,1,3,5,)
a <- c(1,5,1,3,5,7)
a
a+1
debugSource('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
debugSource('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
squareMat
det(squareMat$squareMat)
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(30, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/rawFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(10, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/rawFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
estiVals
plot(estiVals)
as.vector(estiVals)
source('~/.active-rstudio-document')
estiVals
as.numeric(estiVals)
source('~/.active-rstudio-document')
estiVals <- predict(cartModel, as.data.frame(testSet), type="vector");
errors <- estiVals - testVals
error <- mean(errors^2);
print(sprintf("Mean square error is: %f", error));
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
estiVals
testVals
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
estiVals
debugSource('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
chars
fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
chars%*%fCoefs
fCoefs
chars
vec
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(15, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/rawFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
ange = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
predictByFourier(trainSet,fCoefs)
trainVals
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(20, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/rawFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(20, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(30, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(50, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
?solve
dim(charMat)
inRows <- apply(trainSet, 1, vecToInt);
charMatRed <- charMat[inRows+1,];
squareMat <- getSquareMat(charMatRed);
m <- squareMat$squareMat
m
solve(m)
solve(m, trainVals)
det(m)
myqr <- qr(m)
myqr
solve.qr(myqr)
solve.qr(myqr, trainVals)
solve(m, trainVals)
source('~/.active-rstudio-document')
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(50, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
# Visualization ===========================================
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
source('~/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/SimpleCART.R')
source('~/.active-rstudio-document')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
library('rpart')
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/Projects/Performance-Prediction/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
numSamples <- c(100, 81, 62, 139, 48, 2402);
#systems <- c("LLVM2", "LLVMX264", "X2642", "Test2");
#numSamples <- c(25000, 18838, 20351);
sysNum <- 1;
sys <- systems[sysNum];
numSample <- numSamples[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
allSample <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
n <- ncol(allSample) - 1
numObs <- nrow(allSample)
allSample <- allSample[sample(numObs),];
trainSet <- allSample[1:numSample, 1:n];
trainVals <- allSample[1:numSample, (n+1)];
testSet <- allSample[(numSample+1):numObs, 1:n];
testVals <- allSample[(numSample+1):numObs,(n+1)];
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/.active-rstudio-document')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/.active-rstudio-document')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
source('~/.active-rstudio-document')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
source('~/00ME/Education/UW/Projects/Fourier-Extension/FourierExtensionLearning.R')
#range = seq(1, length(testVals), by=1000);
range=1:length(testVals)
ord <- order(testVals, decreasing=T);
testVals <- testVals[ord];
estiVals <- estiVals[ord];
minVal = min(estiVals[range], testVals[range]);
maxVal = max(estiVals[range], testVals[range]);
plot(testVals[range], type = 'l', xlab = 'x', ylab = 'f(x)', col = 2,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(estiVals[range], col = 4);
# Titles and legends and others:
title('Original and Estimated Functions, CART')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
