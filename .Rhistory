x <- list(1:2)
tmp = expand.grid(rep(x, 10))
View(tmp)
source('~/.active-rstudio-document')
View(fun)
fun <- apply(fun, 1, rev)
View(fun)
source('~/.active-rstudio-document')
View(fun)
vals1 <- c(4,-2,4,-2,4,-2,4,-2)
vals2 <- c(7,7,4,4,-3,-3,-7,-7)
rep(vals, 3)
rep(vals1, 3)
?rep
rep(vals1, each=3)
source('~/.active-rstudio-document')
vals
source('~/.active-rstudio-document')
vals
source('~/.active-rstudio-document')
View(fun)
1:8*4:11
6%2
6%%2
5%%2
?nrow
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getCoef(c(0,0,0,0,0,0))
getCoef(c(0,0,1,0,0,0))
getCoef(c(0,0,1,0,1,0))
View(funVal)
getCoef(c(0,0,0,0,1,0))
getCoef(c(0,0,0,0,1,1))
apply(getCoef, fun)
apply(fun,1, getCoef)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(coefVal)
source('~/.active-rstudio-document')
newVals
fun
f(c(0,0,0,0,0,0))
coefVal
coefVal[1,7]
x <- c(0,0,0,0,0,0)
char(coefVal[1,1:6], x)
char(coefVal[2,1:6], x)
char(coefVal[5,1:6], x)
char(coefVal[8,1:6], x)
x <- c(0,0,0,0,0,1)
char(coefVal[1,1:6], x)
View(coefVal)
char(coefVal[2,1:6], x)
char(coefVal[2,1:6], x)*coefVal[2,7]
char(coefVal[1,1:6], x)*coefVal[1,7]
char(coefVal[3,1:6], x)*coefVal[3,7]
char(coefVal[5,1:6], x)*coefVal[5,7]
x
View(funVal)
View(coefVal)
f(x)
debugSource('~/00ME/Education/UW/CS860/JavaImp/ExtendSparseFun.R')
debugSource('~/00ME/Education/UW/CS860/JavaImp/ExtendSparseFun.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(coefVal)
source('~/.active-rstudio-document')
nrow(coefVal)
source('~/.active-rstudio-document')
newVasl
newVals
funVal[,7]
funVal[,7] - newVals
origTable1 <- matrix(1:6, 2,3)
origTable2 <- matrix(1:20, 5,4)
newTable <- cbind(origTable1[rep(1:nrow(origTable1), nrow(origTable2)),],
origTable2[rep(1:nrow(origTable2), each=nrow(origTable1)),]);
View(newTable)
origTable1
origTable2
ncol(newTable)
newTable
newVals <- newTable[,ncol(origTable1)]+newTable[,ncol(newTable)];
cbind(newTable[,c(-ncol(origTable1),-ncol(newTable))], newVals)
cbind(newTable[,c(-ncol(origTable1),-ncol(newTable))], newVals, col.names=F)
?cbind
newTable <- cbind(newTable[,c(-ncol(origTable1),-ncol(newTable))], newVals)
colnames(newTable) <- NULL
newTable
source('~/.active-rstudio-document')
source('~/00ME/Education/UW/CS860/JavaImp/ExtendSparseFun.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/00ME/Education/UW/CS860/JavaImp/ExtendSparseFun.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dim(newTable)
2……24
2^24
seq(1,10,by=3)
seq(1,10,by=5)
seq(1,10,by=4)
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/CS860/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp/');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test", "LLVM2");
sysNum <- 7;
sys <- systems[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
estiPath <- paste(sys, '/estiNormedFun.csv', sep='');
#estiPath <- paste(sys, '/sparseFun.csv', sep='');
origCoefPath <- paste(sys, '/normedCoef.csv', sep='');
estiCoefPath <- paste(sys, '/estiRawCoef.csv', sep='');
#estiCoefPath <- paste(sys, '/sparseCoef.csv', sep='');
#==============================================================================
origTable <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
estiTable <- as.matrix(read.csv(estiPath, sep = "", header = F, skip = 1));
n <- ncol(origTable) - 1;
noObs <- nrow(origTable);
#==========================================================
# Compare raw function values:
range = seq(1, noObs, by=1000);
ord = order(origTable[,n+1], decreasing=T);
origVals = origTable[,n+1][ord];
estiVals = estiTable[,n+1][ord];
# The estimation, h(x):
minVal = min(estiVals[range], origVals[range]);
maxVal = max(estiVals[range], origVals[range]);
# Plot and compare, the estimated first:
plot(estiVals[range], type = 'p', xlab = 'x', ylab = 'h(x)', col = 4,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(origVals[range], col = 2);
# Titles and legends and others:
title('Original and Estimated Function Comparison')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
#errors <- as.matrix(abs(origTable[, n+1] - estiTable[, n+1])/abs(origTable[,n+1]));
errors <- as.matrix(abs((origVals - estiVals)/origVals));
maxerror <- max(errors);
minerror <- min(errors);
error <- mean(errors);
error2 <- mean((origTable[, n+1] - estiTable[, n+1])^2)#/sum(origTable[,n+1]^2);
d first:
plot(estiVals[range], type = 'l', xlab = 'x', ylab = 'h(x)', col = 4,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(origVals[range], col = 2);
source('~/00ME/Education/UW/CS860/JavaImp/Compare.R')
dim(newTable)
332441^4
332441*4
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/CS860/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp/');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test", "LLVM2");
sysNum <- 7;
sys <- systems[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
estiPath <- paste(sys, '/estiNormedFun.csv', sep='');
#estiPath <- paste(sys, '/sparseFun.csv', sep='');
origCoefPath <- paste(sys, '/normedCoef.csv', sep='');
estiCoefPath <- paste(sys, '/estiRawCoef.csv', sep='');
#estiCoefPath <- paste(sys, '/sparseCoef.csv', sep='');
#==============================================================================
origTable <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
estiTable <- as.matrix(read.csv(estiPath, sep = "", header = F, skip = 1));
n <- ncol(origTable) - 1;
noObs <- nrow(origTable);
#==========================================================
# Compare raw function values:
range = seq(1, noObs, by=1000);
ord = order(origTable[,n+1], decreasing=T);
origVals = origTable[,n+1][ord];
estiVals = estiTable[,n+1][ord];
# The estimation, h(x):
minVal = min(estiVals[range], origVals[range]);
maxVal = max(estiVals[range], origVals[range]);
# Plot and compare, the estimated first:
plot(estiVals[range], type = 'l', xlab = 'x', ylab = 'h(x)', col = 4,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(origVals[range], col = 2);
# Titles and legends and others:
title('Original and Estimated Function Comparison')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
#errors <- as.matrix(abs(origTable[, n+1] - estiTable[, n+1])/abs(origTable[,n+1]));
errors <- as.matrix(abs((origVals - estiVals)/origVals));
maxerror <- max(errors);
minerror <- min(errors);
error <- mean(errors);
error2 <- mean((origTable[, n+1] - estiTable[, n+1])^2)#/sum(origTable[,n+1]^2);
plot(errors[range], type='l', xlab = 'x', ylab = 'error at x', col = 4);
title('Error at all points');
print(sprintf("relative error is: %f", error));
print(sprintf("L2 error is: %f", error2));
2^23
2^23/9216
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/CS860/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp/');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
systems <- c("LLVM2", "LLVMX624");
sysNum <- 2;
sys <- systems[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
estiPath <- paste(sys, '/estiNormedFun.csv', sep='');
#estiPath <- paste(sys, '/sparseFun.csv', sep='');
origCoefPath <- paste(sys, '/normedCoef.csv', sep='');
estiCoefPath <- paste(sys, '/estiRawCoef.csv', sep='');
#estiCoefPath <- paste(sys, '/sparseCoef.csv', sep='');
#==============================================================================
origTable <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
estiTable <- as.matrix(read.csv(estiPath, sep = "", header = F, skip = 1));
n <- ncol(origTable) - 1;
noObs <- nrow(origTable);
#==========================================================
# Compare raw function values:
range = seq(1, noObs, by=2000);
ord = order(origTable[,n+1], decreasing=T);
origVals = origTable[,n+1][ord];
estiVals = estiTable[,n+1][ord];
# The estimation, h(x):
minVal = min(estiVals[range], origVals[range]);
maxVal = max(estiVals[range], origVals[range]);
# Plot and compare, the estimated first:
plot(estiVals[range], type = 'l', xlab = 'x', ylab = 'h(x)', col = 4,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(origVals[range], col = 2);
# Titles and legends and others:
title('Original and Estimated Function Comparison')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
#errors <- as.matrix(abs(origTable[, n+1] - estiTable[, n+1])/abs(origTable[,n+1]));
errors <- as.matrix(abs((origVals - estiVals)/origVals));
maxerror <- max(errors);
minerror <- min(errors);
error <- mean(errors);
error2 <- mean((origTable[, n+1] - estiTable[, n+1])^2)#/sum(origTable[,n+1]^2);
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/CS860/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp/');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
systems <- c("LLVM2", "LLVMX264");
sysNum <- 2;
sys <- systems[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
estiPath <- paste(sys, '/estiNormedFun.csv', sep='');
#estiPath <- paste(sys, '/sparseFun.csv', sep='');
origCoefPath <- paste(sys, '/normedCoef.csv', sep='');
estiCoefPath <- paste(sys, '/estiRawCoef.csv', sep='');
#estiCoefPath <- paste(sys, '/sparseCoef.csv', sep='');
#==============================================================================
origTable <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
estiTable <- as.matrix(read.csv(estiPath, sep = "", header = F, skip = 1));
n <- ncol(origTable) - 1;
noObs <- nrow(origTable);
#==========================================================
# Compare raw function values:
range = seq(1, noObs, by=2000);
ord = order(origTable[,n+1], decreasing=T);
origVals = origTable[,n+1][ord];
estiVals = estiTable[,n+1][ord];
# The estimation, h(x):
minVal = min(estiVals[range], origVals[range]);
maxVal = max(estiVals[range], origVals[range]);
# Plot and compare, the estimated first:
plot(estiVals[range], type = 'l', xlab = 'x', ylab = 'h(x)', col = 4,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(origVals[range], col = 2);
# Titles and legends and others:
title('Original and Estimated Function Comparison')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
#errors <- as.matrix(abs(origTable[, n+1] - estiTable[, n+1])/abs(origTable[,n+1]));
errors <- as.matrix(abs((origVals - estiVals)/origVals));
maxerror <- max(errors);
minerror <- min(errors);
error <- mean(errors);
error2 <- mean((origTable[, n+1] - estiTable[, n+1])^2)#/sum(origTable[,n+1]^2);
dim(newTable)
299255/1179648
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/CS860/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp/');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
systems <- c("LLVM2", "LLVMX264");
sysNum <- 2;
sys <- systems[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
estiPath <- paste(sys, '/estiNormedFun.csv', sep='');
#estiPath <- paste(sys, '/sparseFun.csv', sep='');
origCoefPath <- paste(sys, '/normedCoef.csv', sep='');
estiCoefPath <- paste(sys, '/estiRawCoef.csv', sep='');
#estiCoefPath <- paste(sys, '/sparseCoef.csv', sep='');
#==============================================================================
origTable <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
estiTable <- as.matrix(read.csv(estiPath, sep = "", header = F, skip = 1));
n <- ncol(origTable) - 1;
noObs <- nrow(origTable);
#==========================================================
# Compare raw function values:
range = seq(1, noObs, by=2000);
ord = order(origTable[,n+1], decreasing=T);
origVals = origTable[,n+1][ord];
estiVals = estiTable[,n+1][ord];
# The estimation, h(x):
minVal = min(estiVals[range], origVals[range]);
maxVal = max(estiVals[range], origVals[range]);
# Plot and compare, the estimated first:
plot(estiVals[range], type = 'l', xlab = 'x', ylab = 'h(x)', col = 4,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(origVals[range], col = 2);
# Titles and legends and others:
title('Original and Estimated Function Comparison')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
#errors <- as.matrix(abs(origTable[, n+1] - estiTable[, n+1])/abs(origTable[,n+1]));
133950/1179648
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/CS860/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp/');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
systems <- c("LLVM2", "LLVMX264");
sysNum <- 2;
sys <- systems[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
estiPath <- paste(sys, '/estiNormedFun.csv', sep='');
#estiPath <- paste(sys, '/sparseFun.csv', sep='');
origCoefPath <- paste(sys, '/normedCoef.csv', sep='');
estiCoefPath <- paste(sys, '/estiRawCoef.csv', sep='');
#estiCoefPath <- paste(sys, '/sparseCoef.csv', sep='');
#==============================================================================
origTable <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
estiTable <- as.matrix(read.csv(estiPath, sep = "", header = F, skip = 1));
n <- ncol(origTable) - 1;
noObs <- nrow(origTable);
#==========================================================
# Compare raw function values:
range = seq(1, noObs, by=2000);
ord = order(origTable[,n+1], decreasing=T);
origVals = origTable[,n+1][ord];
estiVals = estiTable[,n+1][ord];
# The estimation, h(x):
minVal = min(estiVals[range], origVals[range]);
maxVal = max(estiVals[range], origVals[range]);
# Plot and compare, the estimated first:
plot(estiVals[range], type = 'l', xlab = 'x', ylab = 'h(x)', col = 4,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(origVals[range], col = 2);
# Titles and legends and others:
title('Original and Estimated Function Comparison')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
isHome = T;
if(isHome){
setwd('/home/yzhang/00ME/Education/UW/CS860/JavaImp/');
}else{
setwd('/home/y825zhan/00ME/CS860/JavaImp/');
}
systems <- c("Apache", "X264", "LLVM", "BDBC", "BDBJ", "Test");
systems <- c("LLVM2", "LLVMX264");
sysNum <- 2;
sys <- systems[sysNum];
origPath <- paste(sys, '/normedFun.csv', sep='');
estiPath <- paste(sys, '/estiNormedFun.csv', sep='');
#estiPath <- paste(sys, '/sparseFun.csv', sep='');
origCoefPath <- paste(sys, '/normedCoef.csv', sep='');
estiCoefPath <- paste(sys, '/estiRawCoef.csv', sep='');
#estiCoefPath <- paste(sys, '/sparseCoef.csv', sep='');
#==============================================================================
origTable <- as.matrix(read.csv(origPath, sep = "", header = F, skip = 1));
estiTable <- as.matrix(read.csv(estiPath, sep = "", header = F, skip = 1));
n <- ncol(origTable) - 1;
noObs <- nrow(origTable);
#==========================================================
# Compare raw function values:
range = seq(1, noObs, by=2000);
ord = order(origTable[,n+1], decreasing=T);
origVals = origTable[,n+1][ord];
estiVals = estiTable[,n+1][ord];
# The estimation, h(x):
minVal = min(estiVals[range], origVals[range]);
maxVal = max(estiVals[range], origVals[range]);
# Plot and compare, the estimated first:
plot(estiVals[range], type = 'l', xlab = 'x', ylab = 'h(x)', col = 4,
ylim = c(minVal*0.95,maxVal*1.05));
# The real, f(x):
lines(origVals[range], col = 2);
# Titles and legends and others:
title('Original and Estimated Function Comparison')
legend('topright', legend = c("Estimated h(x)", "Real f(x)"),
lwd = c(2.5, 2.5), col = c(4,2));
